{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","maxWidth","calculateTrials","dropRate","targetRate","Math","ceil","log","App","classes","useState","setDropRate","data","setData","markData","setMarkData","className","noValidate","autoComplete","TextField","id","label","variant","onChange","event","v","parseFloat","target","value","d","nothingRate","maxRate","targetTrials","console","stackedNothingRate","i","p","x","y","push","height","width","yDomain","curve","opacity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTAYMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,OAAQ,SACRC,SAAU,UAKhB,SAASC,EAAgBC,EAAkBC,GACzC,OAAOC,KAAKC,KAAKC,YAAI,EAAIH,EAAY,EAAID,IAiD5BK,MA9Cf,WACE,IAAMC,EAAUd,IADH,EAEmBe,mBAAiB,IAFpC,mBAENP,EAFM,KAEIQ,EAFJ,OAGWD,mBAAqC,IAHhD,mBAGNE,EAHM,KAGAC,EAHA,OAImBH,mBAAqC,IAJxD,mBAINI,EAJM,KAIIC,EAJJ,KA4Bb,OACE,yBAAKC,UAAWP,EAAQV,MACtB,wCACA,0BAAMkB,YAAU,EAACC,aAAa,OAC5B,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,IAAIC,QAAQ,WAAWC,SA1B7C,SAACC,GACpB,IAAMC,EAAIC,WAAWF,EAAMG,OAAOC,OAAS,IACrCC,EAAI,GACJC,EAAc,EAAIL,EAClBM,EAAU7B,EAAgBuB,EAAG,KAC7BO,EAAe9B,EAAgBuB,EAAG,IACxCQ,QAAQ1B,IAAIyB,GAEZ,IADA,IAAIE,EAAqB,EAChBC,EAAI,EAAGA,EAAIJ,EAASI,IAAK,CAEhC,IAAMC,EAAI,CAAEC,EAAGF,EAAGG,EAA8B,KAA1B,GADtBJ,GAA0CJ,KAE1CD,EAAEU,KAAKH,GAEHD,IAAMH,GACRjB,EAAY,CAACqB,IAIjBvB,EAAQgB,GACRlB,EAAYa,EAAMG,OAAOC,QAO+DA,MAAOzB,KAE7F,kBAAC,IAAD,CAAQqC,OAAQ,IAAKC,MAAO,IAAKC,QAAS,CAAC,EAAG,MAC5C,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAY9B,KAAMA,EAAM+B,MAAO,iBAAkBC,QAAS,KAC1D,kBAAC,IAAD,CAAYhC,KAAME,OCrDN+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.e3e31492.chunk.js","sourcesContent":["import \"./App.css\";\nimport \"../node_modules/react-vis/dist/style.css\";\n\nimport { log } from \"mathjs\";\nimport React, { useState } from \"react\";\nimport {\n    HorizontalGridLines, LineSeries, MarkSeries, VerticalGridLines, XAxis, XYPlot, YAxis\n} from \"react-vis\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: \"0 auto\",\n      maxWidth: 600\n    }\n  })\n);\n\nfunction calculateTrials(dropRate: number, targetRate: number) {\n  return Math.ceil(log(1 - targetRate, 1 - dropRate));\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [dropRate, setDropRate] = useState<string>(\"\");\n  const [data, setData] = useState<{ x: number; y: number }[]>([]);\n  const [markData, setMarkData] = useState<{ x: number; y: number }[]>([]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = parseFloat(event.target.value) / 100;\n    const d = [];\n    const nothingRate = 1 - v;\n    const maxRate = calculateTrials(v, 0.99);\n    const targetTrials = calculateTrials(v, 0.9);\n    console.log(targetTrials);\n    var stackedNothingRate = 1.0;\n    for (let i = 1; i < maxRate; i++) {\n      stackedNothingRate = stackedNothingRate * nothingRate;\n      const p = { x: i, y: (1 - stackedNothingRate) * 100 };\n      d.push(p);\n\n      if (i === targetTrials) {\n        setMarkData([p]);\n      }\n    }\n\n    setData(d);\n    setDropRate(event.target.value);\n  };\n\n  return (\n    <div className={classes.root}>\n      <h1>DROPRATE</h1>\n      <form noValidate autoComplete=\"off\">\n        <TextField id=\"outlined-basic\" label=\"%\" variant=\"outlined\" onChange={handleChange} value={dropRate} />\n      </form>\n      <XYPlot height={300} width={600} yDomain={[0, 100]}>\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis />\n        <YAxis />\n        <LineSeries data={data} curve={\"curveMonotoneX\"} opacity={0.5} />\n        <MarkSeries data={markData} />\n      </XYPlot>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}