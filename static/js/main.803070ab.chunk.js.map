{"version":3,"sources":["Helper.ts","RateChart.tsx","Item.tsx","NewItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["calculateTrials","dropRate","targetRate","Math","ceil","log","calculateRate","trials","pow","formatPercent","value","minimumFractionDigits","toLocaleString","undefined","style","formatTrials","i","digits","metrics","symbol","rx","length","toFixed","replace","formatMetricPrefixNumber","RateChart","rate","useState","rateData","setRateData","targetData","setTargetData","currentData","setCurrentData","useEffect","data","maxTrials","targetTrials","step","floor","push","x","y","height","yDomain","tickFormat","v","title","opacity","useStyles","makeStyles","theme","createStyles","root","margin","maxWidth","paper","marginBottom","padding","summary","display","input","width","background","borderTopLeftRadius","borderBottomLeftRadius","borderRight","paddingLeft","paddingRight","heading","flex","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","textAlign","color","palette","text","hint","secondary","dark","fontWeight","chart","actions","justifyContent","action","details","Item","item","onUpdate","onDelete","classes","expanded","setExpanded","Accordion","onChange","event","AccordionSummary","expandIcon","className","Typography","name","InputBase","trialsPerClick","inputProps","align","target","endAdornment","InputAdornment","position","Button","variant","onClick","parseInt","updatedAt","Date","breakpoints","values","sm","form","marginLeft","NewItem","onAddItem","setName","percent","setPercent","Paper","noValidate","autoComplete","TextField","label","InputProps","parseFloat","createdAt","header","alignItems","logo","fontFamily","marginRight","list","App","items","setItems","prefersDarkMode","useMediaQuery","themeMode","setThemeMode","React","useMemo","createMuiTheme","type","updateItem","index","stagedItems","deleteItem","splice","stringifiedItems","localStorage","getItem","JSON","parse","localStorageThemeMode","stringify","setItem","ThemeProvider","CssBaseline","src","alt","prevThemeMode","prevItems","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.803070ab.chunk.js","sourcesContent":["import { log } from \"mathjs\";\n\nexport function calculateTrials(dropRate: number, targetRate: number) {\n  return Math.ceil(log(1 - targetRate, 1 - dropRate));\n}\n\nexport function calculateRate(dropRate: number, trials: number) {\n  return 1 - Math.pow(1 - dropRate, trials);\n}\n\nexport function formatPercent(value: number, minimumFractionDigits = 0) {\n  return value.toLocaleString(undefined, { style: \"percent\", minimumFractionDigits });\n}\n\nexport function formatTrials(value: number) {\n  return formatMetricPrefixNumber(value);\n}\n\nexport function formatMetricPrefixNumber(value: number, digits = 0) {\n  const metrics = [\n    { value: 1, symbol: \"\" },\n    { value: 1e4, symbol: \"만\" },\n    { value: 1e8, symbol: \"억\" },\n    { value: 1e12, symbol: \"조\" },\n    { value: 1e16, symbol: \"경\" }\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var i;\n  for (i = metrics.length - 1; i > 0; i--) {\n    if (value >= metrics[i].value) {\n      break;\n    }\n  }\n  return (value / metrics[i].value).toFixed(digits).replace(rx, \"$1\") + metrics[i].symbol;\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n    FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, MarkSeries, VerticalGridLines, XAxis,\n    YAxis\n} from \"react-vis\";\n\nimport { calculateRate, calculateTrials, formatPercent, formatTrials } from \"./Helper\";\n\ninterface RateChartProps {\n  rate: number;\n  trials: number;\n}\n\nconst RateChart: React.FC<RateChartProps> = ({ rate, trials }) => {\n  const [rateData, setRateData] = useState<{ x: number; y: number }[]>([]);\n  const [targetData, setTargetData] = useState<{ x: number; y: number }[]>([]);\n  const [currentData, setCurrentData] = useState<{ x: number; y: number }[]>([]);\n\n  useEffect(() => {\n    if (rate) {\n      const data = [];\n      const maxTrials = calculateTrials(rate, 0.99);\n      const targetTrials = calculateTrials(rate, 0.9);\n\n      const step = Math.floor(maxTrials / 20);\n\n      for (let i = 1; i < maxTrials; i += step) {\n        data.push({ x: i, y: calculateRate(rate, i) });\n      }\n\n      setCurrentData([{ x: trials, y: calculateRate(rate, trials) }]);\n      setTargetData([{ x: targetTrials, y: calculateRate(rate, targetTrials) }]);\n      setRateData(data);\n    }\n  }, [rate, trials]);\n\n  return (\n    <div>\n      <FlexibleWidthXYPlot height={300} yDomain={[0, 1]}>\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis tickFormat={v => formatTrials(v)} title=\"시도횟수\" />\n        <YAxis tickFormat={v => formatPercent(v)} title=\"누적확률\" />\n        <LineSeries data={rateData} opacity={0.5} />\n        <MarkSeries data={targetData} />\n        <MarkSeries data={currentData} />\n      </FlexibleWidthXYPlot>\n    </div>\n  );\n};\n\nexport default RateChart;\n","import React, { useState } from \"react\";\n\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport Button from \"@material-ui/core/Button\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport { calculateRate, formatPercent } from \"./Helper\";\nimport RateChart from \"./RateChart\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: \"0 auto\",\n      maxWidth: 600\n    },\n    paper: {\n      marginBottom: \"1rem\",\n      padding: \"1rem\"\n    },\n    summary: {\n      display: \"flex\"\n    },\n    input: {\n      width: \"5rem\",\n      background: \"rgba(0,0,0,0.09)\",\n      borderTopLeftRadius: \"4px\",\n      borderBottomLeftRadius: \"4px\",\n      borderRight: \"0\",\n      paddingLeft: \"1rem\",\n      paddingRight: \"1rem\"\n    },\n    heading: {\n      flex: 1,\n      fontSize: theme.typography.pxToRem(15),\n      flexBasis: \"33.33%\",\n      flexShrink: 0\n    },\n    secondaryHeading: {\n      flex: 1,\n      textAlign: \"right\",\n      fontSize: theme.typography.pxToRem(15),\n      color: theme.palette.text.hint,\n      \"& b\": {\n        color: theme.palette.secondary.dark,\n        fontWeight: \"normal\"\n      }\n    },\n    chart: {\n      margin: \"1rem\"\n    },\n    actions: {\n      display: \"flex\",\n      margin: \"1rem\",\n      justifyContent: \"space-between\"\n    },\n    action: {\n      \"&:last-child\": {\n        textAlign: \"right\"\n      }\n    },\n    details: {}\n  })\n);\n\nexport interface ItemInterface {\n  name: string;\n  dropRate: number;\n  trials: number;\n  trialsPerClick: string;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\ninterface Props {\n  item: ItemInterface;\n  onUpdate: (item: ItemInterface) => void;\n  onDelete: () => void;\n}\n\nconst Item: React.FC<Props> = ({ item, onUpdate, onDelete }) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = useState<boolean>(false);\n\n  const handleChange = (event: React.ChangeEvent<{}>, expanded: boolean) => {\n    setExpanded(expanded);\n  };\n\n  const handleTrialClick = (event: React.MouseEvent) => {\n    onUpdate({ ...item, trials: item.trials + parseInt(item.trialsPerClick), updatedAt: new Date() });\n  };\n\n  const handleTrialsPerClickChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ ...item, trialsPerClick: event.target.value });\n  };\n\n  const handleDeleteClick = (event: React.MouseEvent) => {\n    onDelete();\n  };\n\n  return (\n    <Accordion expanded={expanded} onChange={handleChange}>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />} className={classes.summary}>\n        <Typography className={classes.heading}>{item.name}</Typography>\n        <div className={classes.secondaryHeading}>\n          <b>{(item.trials + 1).toLocaleString(undefined, { minimumFractionDigits: 0 })}</b> 회차 확률:{\" \"}\n          <b>{formatPercent(calculateRate(item.dropRate, item.trials + 1), 2)}</b>\n        </div>\n      </AccordionSummary>\n      <div className={classes.chart}>\n        <RateChart rate={item.dropRate} trials={item.trials + 1} />\n      </div>\n      <div className={classes.actions}>\n        <div className={classes.action}>\n          <InputBase\n            className={classes.input}\n            value={item.trialsPerClick}\n            inputProps={{ align: \"right\", style: { textAlign: \"right\" } }}\n            onChange={handleTrialsPerClickChange}\n            endAdornment={<InputAdornment position=\"end\">회</InputAdornment>}\n          />\n          <Button variant=\"contained\" color=\"primary\" onClick={handleTrialClick}>\n            더하기\n          </Button>\n        </div>\n        <div className={classes.action}>\n          <Button variant=\"text\" color=\"default\" onClick={handleDeleteClick}>\n            <DeleteIcon />\n          </Button>\n        </div>\n      </div>\n    </Accordion>\n  );\n};\n\nexport default Item;\n","import React, { useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport { ItemInterface } from \"./Item\";\nimport RateChart from \"./RateChart\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: \"0 auto\",\n      maxWidth: theme.breakpoints.values.sm\n    },\n    paper: {\n      marginBottom: \"1rem\",\n      padding: \"1rem\"\n    },\n    form: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    name: {\n      flex: 1,\n      maxWidth: \"15rem\"\n    },\n    dropRate: {\n      flex: 1,\n      maxWidth: \"7rem\",\n      marginLeft: \"1rem\"\n    }\n  })\n);\n\ninterface Props {\n  onAddItem: (item: ItemInterface) => void;\n}\n\nconst NewItem: React.FC<Props> = ({ onAddItem }) => {\n  const classes = useStyles();\n  const [name, setName] = useState<string>(\"\");\n  const [percent, setPercent] = useState<string>(\"\");\n\n  const handleItemChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = event.target.value;\n    setName(v);\n  };\n\n  const handlePercentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // TODO: 입력체크(0 < x < 100) 인지\n    const v = event.target.value;\n    setPercent(v);\n  };\n\n  const handleAddClick = () => {\n    onAddItem({\n      name: name,\n      dropRate: parseFloat(percent) / 100,\n      trials: 0,\n      trialsPerClick: \"1\",\n      createdAt: new Date()\n    });\n  };\n\n  return (\n    <Paper className={classes.paper}>\n      <form noValidate autoComplete=\"off\" className={classes.form}>\n        <TextField\n          className={classes.name}\n          label=\"아이템명\"\n          onChange={handleItemChange}\n          value={name}\n          variant=\"standard\"\n        />\n        <TextField\n          className={classes.dropRate}\n          label=\"드랍율\"\n          onChange={handlePercentChange}\n          value={percent}\n          variant=\"filled\"\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">%</InputAdornment>\n          }}\n        />\n      </form>\n      <RateChart rate={parseFloat(percent) / 100} trials={1} />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleAddClick}>\n        수집 목록에 추가\n      </Button>\n    </Paper>\n  );\n};\n\nexport default NewItem;\n","import \"./App.css\";\nimport \"../node_modules/react-vis/dist/style.css\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { Button } from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {\n    createMuiTheme, createStyles, makeStyles, Theme, ThemeProvider\n} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport BrightnessMediumIcon from \"@material-ui/icons/BrightnessMedium\";\n\nimport Item, { ItemInterface } from \"./Item\";\nimport NewItem from \"./NewItem\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: \"0 auto\",\n      maxWidth: 600,\n      padding: \"1rem\"\n    },\n    header: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      fontWeight: \"bold\",\n      alignItems: \"center\"\n    },\n    logo: {\n      fontFamily: \"'Jost', sans-serif\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& img\": {\n        width: \"1.5em\",\n        height: \"1.5em\",\n        marginRight: \"0.3em\"\n      }\n    },\n    actions: {},\n    list: {\n      marginBottom: \"2rem\"\n    }\n  })\n);\n\nfunction App() {\n  const classes = useStyles();\n  const [items, setItems] = useState<ItemInterface[]>([]);\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const [themeMode, setThemeMode] = useState<\"dark\" | \"light\">(prefersDarkMode ? \"dark\" : \"light\");\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: themeMode\n        }\n      }),\n    [themeMode]\n  );\n\n  const addItem = (item: ItemInterface) => {\n    setItems(prevItems => [item, ...prevItems]);\n  };\n\n  const updateItem = (index: number) => (item: ItemInterface) => {\n    const stagedItems = [...items];\n    stagedItems[index] = { ...item };\n    setItems(stagedItems);\n  };\n\n  const deleteItem = (index: number) => () => {\n    const stagedItems = [...items];\n    stagedItems.splice(index, 1);\n    setItems(stagedItems);\n  };\n\n  const toggleThemeMode = () => {\n    setThemeMode(prevThemeMode => {\n      if (prevThemeMode === \"light\") return \"dark\";\n      else return \"light\";\n    });\n  };\n\n  useEffect(() => {\n    const stringifiedItems = localStorage.getItem(\"items\");\n    if (stringifiedItems !== null) {\n      setItems(JSON.parse(stringifiedItems));\n    }\n\n    const localStorageThemeMode = localStorage.getItem(\"theme-mode\");\n    if (localStorageThemeMode === \"dark\" || localStorageThemeMode === \"light\") {\n      setThemeMode(localStorageThemeMode);\n    }\n  }, []);\n\n  useEffect(() => {\n    const stringifiedItems = JSON.stringify(items);\n    localStorage.setItem(\"items\", stringifiedItems);\n  }, [items]);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme-mode\", themeMode);\n  }, [themeMode]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <div className={classes.header}>\n          <h1 className={classes.logo}>\n            <img src=\"/logo192.png\" alt=\"logo\" />\n            DROPRATE\n          </h1>\n          <div className={classes.actions}>\n            <Button onClick={toggleThemeMode}>\n              <BrightnessMediumIcon />\n            </Button>\n          </div>\n        </div>\n\n        <NewItem onAddItem={addItem} />\n\n        {items.length > 0 && (\n          <>\n            <h2>수집 목록</h2>\n            <div className={classes.list}>\n              {items.map((item, index) => {\n                return <Item item={item} key={index} onUpdate={updateItem(index)} onDelete={deleteItem(index)} />;\n              })}\n            </div>\n          </>\n        )}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}