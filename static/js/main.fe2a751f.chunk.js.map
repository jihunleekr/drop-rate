{"version":3,"sources":["RateChart.tsx","Item.tsx","NewItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["calculateTrials","dropRate","targetRate","Math","ceil","log","RateChart","rate","useState","rateData","setRateData","targetData","setTargetData","useEffect","data","failure","maxTrials","targetTrials","stackedFailureRate","i","p","x","y","push","height","yDomain","tickFormat","v","title","opacity","useStyles","makeStyles","theme","createStyles","root","margin","maxWidth","paper","marginBottom","padding","textField","marginRight","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","Item","item","classes","expanded","setExpanded","Accordion","onChange","event","AccordionSummary","expandIcon","Typography","className","name","percent","parseFloat","breakpoints","values","sm","form","display","justifyContent","NewItem","onAddItem","setName","setPercent","Paper","noValidate","autoComplete","TextField","label","target","value","variant","InputProps","endAdornment","InputAdornment","position","Button","onClick","App","items","setItems","prevItems","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe2a751f.chunk.js","sourcesContent":["import { log } from \"mathjs\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n    FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, MarkSeries, VerticalGridLines, XAxis,\n    YAxis\n} from \"react-vis\";\n\nfunction calculateTrials(dropRate: number, targetRate: number) {\n  return Math.ceil(log(1 - targetRate, 1 - dropRate));\n}\n\ninterface RateChartProps {\n  rate: number;\n}\n\nconst RateChart: React.FC<RateChartProps> = ({ rate }) => {\n  const [rateData, setRateData] = useState<{ x: number; y: number }[]>([]);\n  const [targetData, setTargetData] = useState<{ x: number; y: number }[]>([]);\n\n  useEffect(() => {\n    if (rate) {\n      const data = [];\n      const failure = 1 - rate;\n      const maxTrials = calculateTrials(rate, 0.99);\n      const targetTrials = calculateTrials(rate, 0.9);\n      var stackedFailureRate = 1.0;\n      for (let i = 1; i < maxTrials; i++) {\n        stackedFailureRate = stackedFailureRate * failure;\n        const p = { x: i, y: (1 - stackedFailureRate) * 100 };\n        data.push(p);\n\n        if (i === targetTrials) {\n          setTargetData([p]);\n        }\n      }\n      setRateData(data);\n    }\n  }, [rate]);\n\n  return (\n    <div>\n      <FlexibleWidthXYPlot height={300} yDomain={[0, 100]}>\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis tickFormat={v => `${v}회`} title=\"시도횟수\" />\n        <YAxis tickFormat={v => `${v}%`} title=\"누적확률\" />\n        <LineSeries data={rateData} opacity={0.5} />\n        <MarkSeries data={targetData} />\n      </FlexibleWidthXYPlot>\n    </div>\n  );\n};\n\nexport default RateChart;\n","import React, { useState } from \"react\";\n\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport RateChart from \"./RateChart\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: \"0 auto\",\n      maxWidth: 600\n    },\n    paper: {\n      marginBottom: \"1rem\",\n      padding: \"1rem\"\n    },\n    textField: {\n      marginRight: \"1rem\"\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      flexBasis: \"33.33%\",\n      flexShrink: 0\n    },\n    secondaryHeading: {\n      fontSize: theme.typography.pxToRem(15),\n      color: theme.palette.text.secondary\n    }\n  })\n);\n\ninterface Props {\n  item: { name: string; percent: string };\n}\n\nconst Item: React.FC<Props> = ({ item }) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = useState<boolean>(false);\n\n  const handleChange = (event: React.ChangeEvent<{}>, expanded: boolean) => {\n    setExpanded(expanded);\n  };\n\n  return (\n    <Accordion expanded={expanded} onChange={handleChange}>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n        <Typography className={classes.heading}>{item.name}</Typography>\n        <Typography className={classes.secondaryHeading}>{item.percent}%</Typography>\n      </AccordionSummary>\n      <div>\n        <RateChart rate={parseFloat(item.percent) / 100} />\n      </div>\n    </Accordion>\n  );\n};\n\nexport default Item;\n","import React, { useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport RateChart from \"./RateChart\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: \"0 auto\",\n      maxWidth: theme.breakpoints.values.sm\n    },\n    paper: {\n      marginBottom: \"1rem\",\n      padding: \"1rem\"\n    },\n    form: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    textField: {}\n  })\n);\n\ninterface Props {\n  onAddItem: (item: { name: string; percent: string }) => void;\n}\n\nconst NewItem: React.FC<Props> = ({ onAddItem }) => {\n  const classes = useStyles();\n  const [name, setName] = useState<string>(\"\");\n  const [percent, setPercent] = useState<string>(\"\");\n\n  const handleItemChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = event.target.value;\n    setName(v);\n  };\n\n  const handlePercentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // TODO: 입력체크(0 < x < 100) 인지\n    const v = event.target.value;\n    setPercent(v);\n  };\n\n  const handleAddClick = () => {\n    onAddItem({\n      name: name,\n      percent: percent\n    });\n  };\n\n  return (\n    <Paper className={classes.paper}>\n      <form noValidate autoComplete=\"off\" className={classes.form}>\n        <TextField\n          className={classes.textField}\n          label=\"아이템명\"\n          onChange={handleItemChange}\n          value={name}\n          variant=\"standard\"\n        />\n        <TextField\n          className={classes.textField}\n          label=\"드랍율\"\n          onChange={handlePercentChange}\n          value={percent}\n          variant=\"filled\"\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">%</InputAdornment>\n          }}\n        />\n      </form>\n      <RateChart rate={parseFloat(percent) / 100} />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleAddClick}>\n        수집 목록에 추가\n      </Button>\n    </Paper>\n  );\n};\n\nexport default NewItem;\n","import \"./App.css\";\nimport \"../node_modules/react-vis/dist/style.css\";\n\nimport React, { useState } from \"react\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nimport Item from \"./Item\";\nimport NewItem from \"./NewItem\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: \"0 auto\",\n      maxWidth: 600\n    },\n    paper: {\n      marginBottom: \"1rem\",\n      padding: \"1rem\"\n    },\n    textField: {\n      marginRight: \"1rem\"\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      flexBasis: \"33.33%\",\n      flexShrink: 0\n    },\n    secondaryHeading: {\n      fontSize: theme.typography.pxToRem(15),\n      color: theme.palette.text.secondary\n    }\n  })\n);\n\nfunction App() {\n  const classes = useStyles();\n  const [items, setItems] = useState<{ name: string; percent: string }[]>([]);\n\n  const addItem = (item: any) => {\n    setItems(prevItems => [{ name: item.name, percent: item.percent }, ...prevItems]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <h1>DROPRATE</h1>\n\n      <NewItem onAddItem={addItem} />\n\n      <h2>수집 목록</h2>\n      {items.map((item, index) => {\n        return <Item item={item} key={index} />;\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}